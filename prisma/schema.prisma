// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                       String   @id @default(cuid())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.VarChar(500)
  access_token             String?  @db.VarChar(500)
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
}

model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  firstName     String
  lastName      String
  email         String         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String         @default("user") //MIGHT GET RID OF BECAUSE OF LEAGUE MEMBER
  accounts      Account[]
  sessions      Session[]
  leagues       LeagueMember[]
  adminTo       League[]
}

model League {
  id      String         @id @default(cuid())
  name    String
  image   String?
  members LeagueMember[]
  admin   User           @relation(fields: [adminId], references: [id]) //Dont necessarily need this, but nice
  adminId String
}

model LeagueMember {
  member    User     @relation(fields: [userId], references: [id])
  userId    String
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String

  @@id([userId, leagueId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
